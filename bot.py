from aiogram import Bot,types
from aiogram.dispatcher import Dispatcher,FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
botapi = '—Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
bot = Bot(botapi)
dp = Dispatcher(bot,storage=MemoryStorage())

class Start(StatesGroup):
    Itext = State()
    Iurl = State()

@dp.message_handler(commands='chatid')
async def chat(msg: types.Message):
    print(msg.chat.id,msg.from_user.id)

@dp.message_handler(commands='send')
async def inp_text(msg: types.Message,state: FSMContext):
    if msg.from_user.id == 392104225 or 5331252448:
        await Start.Itext.set()
        await msg.answer('–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ø–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞ –º–µ—Å—Ç–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å—Å—ã–ª–∫–æ–π "|"\n /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤–≤–æ–¥–∞')
        async with state.proxy() as data:
            data['msg_text'] = []
    else: await msg.answer("—É –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞")

@dp.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–≤–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

@dp.message_handler(state=Start.Itext)
async def inp_url(msg: types.Message, state: FSMContext):
    if not '|' in msg.text:
        await msg.answer('—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "|"!')
        await state.finish()
    elif '‚ô®' in msg.text:
        await msg.answer('–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚ô®, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º!!!')
        await state.finish()
    else:
        spl = [msg.text.split('|')]
        print(spl)
        if len(spl[0]) == 2:
            async with state.proxy() as data:
                data['msg_text'] = spl
                await Start.Iurl.set()
                await msg.answer('–≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É')
        else:
            await msg.answer('–≤—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ "|"')
            await state.finish()


@dp.message_handler(state=Start.Iurl)
async def ms(msg: types.Message,state: FSMContext):
    async with state.proxy() as data:
        message_text = data['msg_text']
    print(message_text)
    print(msg.text)
    await state.finish()
    await msg.answer('–Ω–∏–∂–µ –≥–æ—Ç–æ–≤—ã–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è:')
    inline_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–≥–∞–π–¥", callback_data='1'))
    await msg.answer(f'{message_text[0][0]} <a href="{msg.text}">üî•üî•üî•</a>  {message_text[0][1]}',
                     parse_mode=types.ParseMode.HTML, reply_markup=inline_keyboard, disable_web_page_preview=True)
    inline_key = reply_markup= types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–¥–∞, –æ—Ç–ø—Ä–∞–≤—å",
                                callback_data=f'2‚ô®{message_text[0][0]}‚ô®{message_text[0][1]}‚ô®{msg.text}'))
    await msg.answer('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª?',reply_markup=inline_key)


@dp.callback_query_handler(lambda call: call.data.startswith('2'))
async def send_massage(call: types.CallbackQuery):
    data = call.data.split('‚ô®')[1:]
    inline_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–≥–∞–π–¥", callback_data='1'))
    await dp.bot.send_message(-1001803055795,f'{data[0]} <a href="{data[2]}">üî•üî•üî•</a>  {data[1]}',
                     parse_mode=types.ParseMode.HTML, reply_markup=inline_keyboard, disable_web_page_preview=True)


@dp.callback_query_handler(lambda call: call.data.startswith('1'))
async def url(call: types.CallbackQuery):
    is_sub = await bot.get_chat_member(chat_id=call.message.chat.id, user_id=call.from_user.id)
    if is_sub['status'] == 'left':
        answer_text = '–≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
    else:
        answer_text = '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üî•üî•üî•–≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏'
    await call.answer(answer_text,show_alert=True)

if __name__ == '__main__':
    executor.start_polling(dp)

